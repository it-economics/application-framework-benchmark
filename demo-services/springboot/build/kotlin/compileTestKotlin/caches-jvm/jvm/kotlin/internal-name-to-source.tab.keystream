,coffee/michel/usermanager/SubjectTestFixtureCcoffee/michel/usermanager/SubjectTestFixture$SubjectModelCollection@coffee/michel/usermanager/SubjectTestFixture$SubjectModelBuilder.coffee/michel/usermanager/UserGroupTestFixtureGcoffee/michel/usermanager/UserGroupTestFixture$UserGroupModelCollectionDcoffee/michel/usermanager/UserGroupTestFixture$UserGroupModelBuilder1coffee/michel/usermanager/api/SubjectWriteDtoTestMcoffee/michel/usermanager/api/SubjectWriteDtoTest$toString - hides password$1>coffee/michel/usermanager/api/controller/SubjectControllerTestÑcoffee/michel/usermanager/api/controller/SubjectControllerTest$allUsers - when a list of users is requested, they must be returned$1Ñcoffee/michel/usermanager/api/controller/SubjectControllerTest$allUsers - when a list of users is requested, they must be returned$2Ñcoffee/michel/usermanager/api/controller/SubjectControllerTest$allUsers - when a list of users is requested, they must be returned$3≥coffee/michel/usermanager/api/controller/SubjectControllerTest$allUsers - when a list of users is request and the service returns an empty list, an empty result must be returned$1Çcoffee/michel/usermanager/api/controller/SubjectControllerTest$userById - when a specific user is requested, it must be returned$1Çcoffee/michel/usermanager/api/controller/SubjectControllerTest$userById - when a specific user is requested, it must be returned$2†coffee/michel/usermanager/api/controller/SubjectControllerTest$assignGroup - when a user group is assigned to a subject, the modified subject must be returned$1†coffee/michel/usermanager/api/controller/SubjectControllerTest$assignGroup - when a user group is assigned to a subject, the modified subject must be returned$2†coffee/michel/usermanager/api/controller/SubjectControllerTest$assignGroup - when a user group is assigned to a subject, the modified subject must be returned$3ïcoffee/michel/usermanager/api/controller/SubjectControllerTest$delete - when a subject is deleted, a response with status code 204 must be returned$1ïcoffee/michel/usermanager/api/controller/SubjectControllerTest$delete - when a subject is deleted, a response with status code 204 must be returned$2™coffee/michel/usermanager/api/controller/SubjectControllerTest$delete - when a subject is deleted but it doesn't exist, a response with status code 230 must be returned$1™coffee/michel/usermanager/api/controller/SubjectControllerTest$delete - when a subject is deleted but it doesn't exist, a response with status code 230 must be returned$2ñcoffee/michel/usermanager/api/controller/SubjectControllerTest$register - when a subject is registered, the newly persisted subject must be returned$1ñcoffee/michel/usermanager/api/controller/SubjectControllerTest$register - when a subject is registered, the newly persisted subject must be returned$2ñcoffee/michel/usermanager/api/controller/SubjectControllerTest$register - when a subject is registered, the newly persisted subject must be returned$3ºcoffee/michel/usermanager/api/controller/SubjectControllerTest$login - when the user logs in and the authentication is successful, the http status 200 must be returned along with the jwt$1ºcoffee/michel/usermanager/api/controller/SubjectControllerTest$login - when the user logs in and the authentication is successful, the http status 200 must be returned along with the jwt$2ºcoffee/michel/usermanager/api/controller/SubjectControllerTest$login - when the user logs in and the authentication is successful, the http status 200 must be returned along with the jwt$3ºcoffee/michel/usermanager/api/controller/SubjectControllerTest$login - when the user logs in and the authentication is successful, the http status 200 must be returned along with the jwt$4§coffee/michel/usermanager/api/controller/SubjectControllerTest$login - when the user logs in and the authentication is fails, the http status 401 must be returned$1§coffee/michel/usermanager/api/controller/SubjectControllerTest$login - when the user logs in and the authentication is fails, the http status 401 must be returned$2@coffee/michel/usermanager/api/controller/UserGroupControllerTestçcoffee/michel/usermanager/api/controller/UserGroupControllerTest$allGroups - when a list of user groups is requested, they must be returned$1çcoffee/michel/usermanager/api/controller/UserGroupControllerTest$allGroups - when a list of user groups is requested, they must be returned$2çcoffee/michel/usermanager/api/controller/UserGroupControllerTest$allGroups - when a list of user groups is requested, they must be returned$3ºcoffee/michel/usermanager/api/controller/UserGroupControllerTest$allGroups - when a list of user groups is request and the service returns an empty list, an empty result must be returned$1ècoffee/michel/usermanager/api/controller/UserGroupControllerTest$userGroupById - when a specific user group is requested, it must be returned$1ècoffee/michel/usermanager/api/controller/UserGroupControllerTest$userGroupById - when a specific user group is requested, it must be returned$2écoffee/michel/usermanager/api/controller/UserGroupControllerTest$create - when user group is created, its persisted version must be returned$1écoffee/michel/usermanager/api/controller/UserGroupControllerTest$create - when user group is created, its persisted version must be returned$2ócoffee/michel/usermanager/api/controller/UserGroupControllerTest$delete - when a subject is deleted, a response with status code 204 must be returned$1ócoffee/michel/usermanager/api/controller/UserGroupControllerTest$delete - when a subject is deleted, a response with status code 204 must be returned$2¨coffee/michel/usermanager/api/controller/UserGroupControllerTest$delete - when a subject is deleted but it doesn't exist, a response with status code 230 must be returned$1¨coffee/michel/usermanager/api/controller/UserGroupControllerTest$delete - when a subject is deleted but it doesn't exist, a response with status code 230 must be returned$2,coffee/michel/usermanager/domain/SubjectTestHcoffee/michel/usermanager/domain/SubjectTest$toString - hides password$1Bcoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec~coffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$getAuthorities - returns UserGroups mapped to Authorities$1Äcoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$getAuthorities - returns UserGroups mapped to Authorities$1$1Äcoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$getAuthorities - returns UserGroups mapped to Authorities$1$2kcoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$isAccountNonExpired - defaults to true$1jcoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$isAccountNonLocked - defaults to true$1ocoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$isCredentialsNonExpired - defaults to true$1acoffee/michel/usermanager/domain/SubjectTest$MatchesUserDetailSpec$isEnabled - defaults to true$1;coffee/michel/usermanager/domain/service/SubjectServiceTestÖcoffee/michel/usermanager/domain/service/SubjectServiceTest$register - when a subject is registered, their password must be encoded$1Öcoffee/michel/usermanager/domain/service/SubjectServiceTest$register - when a subject is registered, their password must be encoded$2Öcoffee/michel/usermanager/domain/service/SubjectServiceTest$register - when a subject is registered, their password must be encoded$3îcoffee/michel/usermanager/domain/service/SubjectServiceTest$login - when a subject is logging in and their password matches, true must be returned$1îcoffee/michel/usermanager/domain/service/SubjectServiceTest$login - when a subject is logging in and their password matches, true must be returned$2îcoffee/michel/usermanager/domain/service/SubjectServiceTest$login - when a subject is logging in and their password matches, true must be returned$3úcoffee/michel/usermanager/domain/service/SubjectServiceTest$login - when a subject is logging in and their password does not match, false must be returned$1úcoffee/michel/usermanager/domain/service/SubjectServiceTest$login - when a subject is logging in and their password does not match, false must be returned$2úcoffee/michel/usermanager/domain/service/SubjectServiceTest$login - when a subject is logging in and their password does not match, false must be returned$3ócoffee/michel/usermanager/domain/service/SubjectServiceTest$listAllSubjects - if a list of all subjects is requested, it must be returned$allSubjects$1ócoffee/michel/usermanager/domain/service/SubjectServiceTest$listAllSubjects - if a list of all subjects is requested, it must be returned$allSubjects$2ãcoffee/michel/usermanager/domain/service/SubjectServiceTest$listAllSubjects - if a list of all subjects is requested, it must be returned$1®coffee/michel/usermanager/domain/service/SubjectServiceTest$listAllSubjects - if a list of all subjects is requested but it's empty, the empty result must be returned$1åcoffee/michel/usermanager/domain/service/SubjectServiceTest$getSubject - if a specific subject is requested by its id, it must be returned$1åcoffee/michel/usermanager/domain/service/SubjectServiceTest$getSubject - if a specific subject is requested by its id, it must be returned$2ícoffee/michel/usermanager/domain/service/SubjectServiceTest$getSubject - if a specific subject is requested by its username, it must be returned$1ícoffee/michel/usermanager/domain/service/SubjectServiceTest$getSubject - if a specific subject is requested by its username, it must be returned$2øcoffee/michel/usermanager/domain/service/SubjectServiceTest$assignGroupToSubject - if a group is to be assigned to the subject, the subject has to be persisted with the newly assigned group$1øcoffee/michel/usermanager/domain/service/SubjectServiceTest$assignGroupToSubject - if a group is to be assigned to the subject, the subject has to be persisted with the newly assigned group$2øcoffee/michel/usermanager/domain/service/SubjectServiceTest$assignGroupToSubject - if a group is to be assigned to the subject, the subject has to be persisted with the newly assigned group$3øcoffee/michel/usermanager/domain/service/SubjectServiceTest$assignGroupToSubject - if a group is to be assigned to the subject, the subject has to be persisted with the newly assigned group$4Ñcoffee/michel/usermanager/domain/service/SubjectServiceTest$delete - if the delete of a subject is requested, it must be performed$1Ñcoffee/michel/usermanager/domain/service/SubjectServiceTest$delete - if the delete of a subject is requested, it must be performed$2=coffee/michel/usermanager/domain/service/UserGroupServiceTest¢coffee/michel/usermanager/domain/service/UserGroupServiceTest$listAllUserGroups - when a list of all user groups is requested, it must be returned$allUserGroups$1¢coffee/michel/usermanager/domain/service/UserGroupServiceTest$listAllUserGroups - when a list of all user groups is requested, it must be returned$allUserGroups$2îcoffee/michel/usermanager/domain/service/UserGroupServiceTest$listAllUserGroups - when a list of all user groups is requested, it must be returned$1∞coffee/michel/usermanager/domain/service/UserGroupServiceTest$listAllUserGroups - when a list of all user groups is requested but its empty, the empty result must be returned$1ãcoffee/michel/usermanager/domain/service/UserGroupServiceTest$getUserGroup - when a specific user group is requested, it must be returned$1ãcoffee/michel/usermanager/domain/service/UserGroupServiceTest$getUserGroup - when a specific user group is requested, it must be returned$2òcoffee/michel/usermanager/domain/service/UserGroupServiceTest$createUserGroup - when a user group is persisted, its persisted version must be returned$1òcoffee/michel/usermanager/domain/service/UserGroupServiceTest$createUserGroup - when a user group is persisted, its persisted version must be returned$2ícoffee/michel/usermanager/domain/service/UserGroupServiceTest$deleteUserGroup - when a user group is to be deleted, the delete must be performed$1ícoffee/michel/usermanager/domain/service/UserGroupServiceTest$deleteUserGroup - when a user group is to be deleted, the delete must be performed$2>coffee/michel/usermanager/persistence/entity/SubjectEntityTestZcoffee/michel/usermanager/persistence/entity/SubjectEntityTest$toString - hides password$1Mcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTestúcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$list - when the repository returns a list of Subjects, they must be returned$1úcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$list - when the repository returns a list of Subjects, they must be returned$2úcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$list - when the repository returns a list of Subjects, they must be returned$3¨coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$list - when the repository returns an empty list of Subjects, an empty list must be returned$1Ücoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$get - when a Subject is requested, it must be returned$1Ücoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$get - when a Subject is requested, it must be returned$2úcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$get - when a Subject is requested and not found, an exception must be thrown$1≤coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$get - when a Subject is requested and not found, an exception must be thrown$$inlined$assertThrows$1≤coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$get - when a Subject is requested and not found, an exception must be thrown$$inlined$assertThrows$2ycoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$inlined$sam$i$java_util_function_Supplier$0åcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$getByName - when a Subject is requested, it must be returned$1åcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$getByName - when a Subject is requested, it must be returned$2¢coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$getByName - when a Subject is requested and not found, an exception must be thrown$1∏coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$getByName - when a Subject is requested and not found, an exception must be thrown$$inlined$assertThrows$1∏coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$getByName - when a Subject is requested and not found, an exception must be thrown$$inlined$assertThrows$2öcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$persist - when a Subject is persisted, it must return the persisted entity$1öcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$persist - when a Subject is persisted, it must return the persisted entity$2∞coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$persist - when a Subject is persisted and a constraint was violated, an exception must be thrown$1∞coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$persist - when a Subject is persisted and a constraint was violated, an exception must be thrown$2∆coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$persist - when a Subject is persisted and a constraint was violated, an exception must be thrown$$inlined$assertThrows$1∆coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$persist - when a Subject is persisted and a constraint was violated, an exception must be thrown$$inlined$assertThrows$2Vcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete$1Vcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete$2Vcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete$3Vcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete$4®coffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete - when a Subject should be deleted but was not found, an exception must be thrown$1æcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete - when a Subject should be deleted but was not found, an exception must be thrown$$inlined$assertThrows$1æcoffee/michel/usermanager/persistence/storage/SubjectJpaRepositoryStorageTest$delete - when a Subject should be deleted but was not found, an exception must be thrown$$inlined$assertThrows$2Ocoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest†coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$list - when the repository returns a list of UserGroups, they must be returned$1†coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$list - when the repository returns a list of UserGroups, they must be returned$2†coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$list - when the repository returns a list of UserGroups, they must be returned$3∞coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$list - when the repository returns an empty list of UserGroups, an empty list must be returned$1äcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$get - when a UserGroup is requested, it must be returned$1äcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$get - when a UserGroup is requested, it must be returned$2†coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$get - when a UserGroup is requested and not found, an exception must be thrown$1∂coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$get - when a UserGroup is requested and not found, an exception must be thrown$$inlined$assertThrows$1∂coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$get - when a UserGroup is requested and not found, an exception must be thrown$$inlined$assertThrows$2{coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$inlined$sam$i$java_util_function_Supplier$0ûcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$persist - when a UserGroup is persisted, it must return the persisted entity$1ûcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$persist - when a UserGroup is persisted, it must return the persisted entity$2Xcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete$1Xcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete$2Xcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete$3Xcoffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete$4¨coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete - when a UserGroup should be deleted but was not found, an exception must be thrown$1¬coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete - when a UserGroup should be deleted but was not found, an exception must be thrown$$inlined$assertThrows$1¬coffee/michel/usermanager/persistence/storage/UserGroupJpaRepositoryStorageTest$delete - when a UserGroup should be deleted but was not found, an exception must be thrown$$inlined$assertThrows$2                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         